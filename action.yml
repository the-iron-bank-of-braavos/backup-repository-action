name: 'Backup repository'
description: >
    Create a repository backup

inputs:
  token:
    description: >
      Personal access token (PAT) used to fetch the repository. Default: empty. This field is optional, required if app credentials are not defined.
    default: ${{ github.token }}
  source-repository:
    description: >
        Source repository.
    required: true
  target-repository:
    description: >
        Target repository name.
    required: true
  ref:
    description: >
        Repository hash to copy.
    required: true
  topics:
    description: >
        Topics to add on destination repository
    default: ''

runs:
  using: "composite"
  steps:
    - name: Clone repository
      uses: actions/checkout@v2
      with:
        repository: ${{ inputs.source-repository }}
        token: ${{ inputs.token }}
    - run: |
        IFS='/'
        read -a repo <<< "${{ inputs.target-repository }}"
        curl -X POST -H "Authorization: token ${{ inputs.token }}" -H "Accept: application/vnd.github.v3+json" "https://api.github.com/orgs/${repo[0]}/repos" -d '{"name": "'"${repo[1]}"'"}'
      shell: bash
    - run: |
        t=$( echo "${{ inputs.topics }}" | tr -d ' ')
        if [ ! -z "$t" ]; then
          curl -X PUT -H "Authorization: token ${{ inputs.token }}" -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/${{ inputs.target-repository }}/topics -d '{"names": ['"$(printf '"%s"\n' "${t//,/\",\"}")"']}'
        fi
      shell: bash
    - run: |
        git config user.name "GitHub Actions Bot"
        git config user.email "<actions@github.com>"
        #git remote remove origin
        #git remote add origin https://${{ inputs.token }}@github.com/${{ inputs.target-repository }}.git
        #git checkout ${{ inputs.ref }}
        #git checkout --orphan ${{ inputs.ref }}
        #git commit -am "sha: ${{ inputs.ref }}"
        #git push origin main

        # Once in the clone's repo directory, remove the old origin
        git remote remove origin
        # Checkout the oldest commit; detached HEAD
        git checkout ${{ inputs.ref }}
        # Create a new orphaned branch, which will be temporary
        git checkout --orphan temp_branch
        # Commit the initial commit for our new truncated history; it will be the state of the tree at the time of the oldest commit (the 50th)
        git commit -m "SHA: ${{ inputs.ref }}"
        # Now that we have that initial commit, we're ready to replay all the other commits on top of it, in order, so rebase main onto it, except for the oldest commit whose parents don't exist in the shallow clone... it has been replaced by our 'initial commit'
        git rebase --onto temp_branch ${{ inputs.ref }} main
        # We're now ready to push this to the new remote repo... add the remote...
        git remote add origin https://${{ inputs.token }}@github.com/${{ inputs.target-repository }}.git
        # ... and push.  We don't need to push the temp branch, only main, the beginning of whose commit chain will be our 'initial commit'
        git push -u origin main
      shell: bash
